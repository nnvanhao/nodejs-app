// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movie {
  id                Int         @id @default(autoincrement())
  title             String
  originalTitle     String?     // Title in its original language
  description       String?
  releaseDate       DateTime
  releaseYear       Int?
  rating            Float?
  tagline           String?     // Short, catchy phrase or slogan
  runtime           Int?        // Total runtime in minutes
  duration          Int?        // Duration in minutes
  durationUnit      String?     // Unit of duration (e.g., "minutes", "hours")
  language          String?     // Language of the movie
  languageCode      String?     // Language code for internationalization
  country           String?     // Country of origin
  posterUrl         String?     // URL to the movie poster
  cast              String?     // List of cast members (comma-separated or JSON array)
  imdbRating        Float?      // IMDb rating
  budget            Float?      // Budget of the movie
  revenue           Float?      // Box office revenue
  boxOfficeGross    Float?      // Gross earnings from the box office
  trailerUrl        String?     // URL to the movie's trailer
  releaseStatus     String?     // Status of the movie's release (e.g., released, upcoming)
  synopsis          String?     // Brief summary or synopsis
  awards            String?     // Awards won by the movie
  productionCompanies String?   // List of production companies (comma-separated or JSON array)
  movieType         MovieTypeEnum // New field to categorize as MOVIE or SERIES
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  links             MovieLink[] // New field for links
  genres            Genre[]     @relation("MovieGenres") // Updated to use named relation
}

model MovieLink {
  id       Int    @id @default(autoincrement())
  url      String
  movieId  Int
  movie    Movie  @relation(fields: [movieId], references: [id])
}

model Genre {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  movies Movie[] @relation("MovieGenres") // Updated to use named relation
}

enum MovieTypeEnum {
  MOVIE
  SERIES
}
